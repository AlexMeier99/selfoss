# This file lints the code, runs tests, builds a package and then deploys it.
# The following environment variables need to be set:
# - “$BINTRAY_USER” and “$BINTRAY_KEY” for pushing built package to Bintray
# - “$GH_TOKEN” to avoid Composer being throttled by GitHub
# - “$CACHIX_AUTH_TOKEN” for uploading built Nix packages to Cachix
language: nix
dist: focal
nix: 2.3.9
sudo: false

env:
    global:
        - CACHIX_CACHE=fossar
        - COMPOSER_NO_INTERACTION=1

matrix:
    include:
        - env: PHP=80
        - env: PHP=74
        - env: PHP=73
        - env: PHP=72
        - env: PHP=71
        - env: PHP=70 CS_FIXER=true LINT_JS=true
        - env: PHP=56 DEPLOY=true
    fast_finish: true

cache:
    directories:
        - vendor
        - $HOME/.composer/cache

before_install:
    # Nix & Cachix set-up.
    - echo "trusted-users = $USER" | sudo tee -a /etc/nix/nix.conf
    - sudo systemctl restart nix-daemon
    - nix-env -iA nixpkgs.cachix
    - cachix use $CACHIX_CACHE
    - nix path-info --all > /tmp/store-path-pre-build

    # Update flake.nix to match the current CI job from matrix.
    - sed -i "s/matrix.phpPackage = \"php\";/matrix.phpPackage = \"php${PHP}\";/" flake.nix

    - if [ -n "$GH_TOKEN" ]; then nix-shell --run "composer config github-oauth.github.com ${GH_TOKEN}"; fi

install:
    - nix-shell --run "npm run install-dependencies"

script:
    - if [ "$LINT_JS" = true ]; then nix-shell --run "npm run lint:client"; fi
    - nix-shell --run "npm run lint:server"
    - if [ "$CS_FIXER" = true ]; then nix-shell --run "npm run cs:server"; fi
    - nix-shell --run "npm run test:server"
    - nix-shell --run "npm run test:integration"

after_success:
    # Upload built Nix packages to Cachix.
    - comm -13 <(sort /tmp/store-path-pre-build | grep -v '\.drv$') <(nix path-info --all | grep -v '\.drv$' | sort) | cachix push $CACHIX_CACHE

before_deploy:
    - nix-shell --run "npm run dist"
    - SELFOSS_ZIPBALL=$(nix-shell --run "utils/bintray.sh")

deploy:
    - provider: bintray
      file: utils/bintray.json
      user: $BINTRAY_USER
      key: $BINTRAY_KEY
      skip_cleanup: true
      on:
          condition: $DEPLOY = true
    - provider: releases
      api_key: $GH_TOKEN
      file: $SELFOSS_ZIPBALL
      skip_cleanup: true
      on:
          tags: true
          condition: $DEPLOY = true
